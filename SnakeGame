import turtle
import time
import random

delay = 0.1

# Score
score = 0
high_score = 0

# Set up screen
wn = turtle.Screen()
wn.title("SNAKE GAME")
wn.bgcolor("green")
wn.setup(width = 600,height = 600)
wn.tracer(0)

# Snake Head
head = turtle.Turtle()
head.speed(0)
head.shape("square")
head.color("black")
head.penup()
head.goto(0,0)
head.direction = "stop"

# Snake Food
food = turtle.Turtle()
food.speed(0)
food.shape("circle")
food.color("red")
food.penup()
food.goto(0,100)

segments = []

# pen 
pen = turtle.Turtle()
pen.speed(0)
pen.shape("square")
pen.color("white")
pen.penup()
pen.hideturtle()
pen.goto(0,260)
pen.write("Score: 0  High Score: 0", align="center", font=("Courier", 24, "normal"))

# Functions
def go_up():
    if head.direction != "down":
        head.direction = "up"

def go_down():
    if head.direction != "up":
        head.direction = "down"

def go_left():
    if head.direction != "right":
        head.direction = "left"

def go_right():
    if head.direction != "left":
        head.direction = "right"


def move():
    if head.direction == "up":
        y = head.ycor()
        head.sety(y + 20)
        
    if head.direction == "down":
        y = head.ycor()
        head.sety(y - 20)
        
    if head.direction == "left":
        x = head.xcor()
        head.setx(x - 20)
        
    if head.direction == "right":
        x = head.xcor()
        head.setx(x + 20)

#keyboard binding
wn.listen()
wn.onkeypress(go_up, "w")
wn.onkeypress(go_down, "x")
wn.onkeypress(go_left, "a")
wn.onkeypress(go_right, "d")

# Main Game Loop        
while True:
    wn.update()

    # Check for a Collision with border
    if head.xcor()>290 or head.xcor()<-290 or head.ycor()>290 or head.ycor()<-290:
        time.sleep(1)
        head.goto(0,0)
        head.direction = "stop"

        # hide segments
        for segment in segments:
            segment.goto(1000,1000)

        # clear the segmentsw
        segments.clear()

        # Reset the score
        score = 0

        # reset the delay
        delay = 0.1

    # update the score
        pen.clear()
        pen.write("Score: {}  High Score: {}".format(score, high_score), align="center", font=("Courier",24, "normal"))


    # Check for Collision
    if head.distance(food) < 20:
        # Move to food to random
        x = random.randint(-290,290)
        y = random.randint(-290,290)
        food.goto(x,y)

        # Add segment
        new_segment = turtle.Turtle()
        new_segment.speed(0)
        new_segment.shape("square")
        new_segment.color("grey")
        new_segment.penup()
        segments.append(new_segment)

        # shorten the delay
        delay -= 0.001

        # Icrease the score
        score += 10
        if score > high_score:
            high_score = score

        pen.clear()
        pen.write("Score: {}  High Score: {}".format(score, high_score), align="center", font=("Courier",24, "normal"))

    # Move the end segments
    for index in range(len(segments)-1, 0, -1):
        x = segments[index -1].xcor()
        y = segments[index-1].ycor()
        segments[index].goto(x,y)

    # Move segments
    if len(segments) > 0:
        x = head.xcor()
        y = head.ycor()
        segments[0].goto(x,y)

    move()

    # check for head collision with body
    for segment in segments:
        if segment.distance(head) < 20:
            time.sleep(1)
            head.goto(0,0)
            head.direction = "stop"

            # hide segments
            for segment in segments:
                segment.goto(1000,1000)

            # clear the segmentsw
            segments.clear()

            # Reset the score
            score = 0

            # Resety the delay
            delay = 0.1

            # Update the score display
            pen.clear()
            pen.write("Score: {} High score: {}".format(score, high_score), align="center", font=("Courier",24, "normal"))
            
    time.sleep(delay)

wn.mainloop()
